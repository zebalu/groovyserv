/*
 * Copyright 2009 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import org.apache.tools.ant.filters.ReplaceTokens

//===========================================
// Basic
//===========================================

apply plugin: 'groovy'
apply plugin: 'java-library'
apply plugin: 'idea'
apply plugin: "io.sdkman.vendors"

defaultTasks 'clean', 'check', 'dist' // whole tasks

// keep same as groovy-core
sourceCompatibility = 1.11
targetCompatibility = 1.11

repositories {
    mavenLocal()
    mavenCentral()
}


configurations {
    // dependencies for archives are picked at compile configuration
    includedArchives {
    }
    implementation.extendsFrom includedArchives
}

dependencies {
    implementation "org.apache.groovy:groovy-all:${groovyVersion}"
    implementation 'commons-cli:commons-cli:1.3.1'
    includedArchives 'net.java.dev.jna:jna:5.17.0'
    testImplementation 'org.spockframework:spock-core:2.3-groovy-4.0'
    testImplementation "org.spockframework:spock-junit4:2.3-groovy-4.0"
    testImplementation 'cglib:cglib-nodep:3.1'       // for spock: enables mocking of classes (in addition to interfaces)
    testImplementation 'org.objenesis:objenesis:2.1' // for spock: enables mocking of without default constructor (together with CGLIB)
}

tasks.withType(AbstractCompile)*.options*.encoding = tasks.withType(GroovyCompile)*.groovyOptions*.encoding = 'UTF-8'

//===========================================
// Tasks
//===========================================

//----------------------------------
// copySpec

def localBinSpec = copySpec {
    from("$projectDir") {
        include "*.txt"
        include "*.md"
    }
    into('lib') {
        from configurations.includedArchives
        from "$buildDir/libs"
    }
    into('bin') {
        fileMode = 0755
        from "$buildDir/platforms/local"
    }
}

def binSpec = copySpec {
    from("$projectDir") {
        include "*.txt"
        include "*.md"
    }
    into('lib') {
        from configurations.includedArchives
        from "$buildDir/libs"
    }
    into('platforms') {
        fileMode = 0755
        from "$buildDir/platforms"
        exclude "local"
    }
    into('bin') {
        fileMode = 0755
        from "$projectDir/src/main/sh"
        from "$projectDir/src/main/bat"

        // dummy commands for setup
        from "$projectDir/src/main/sh", { rename 'setup.sh', 'groovyclient' }
        from "$projectDir/src/main/sh", { rename 'setup.sh', 'groovyserver' }
        from "$projectDir/src/main/bat", { rename 'setup.bat', 'groovyserver.bat' }
        from "$projectDir/src/main/bat", { rename 'setup.bat', 'groovyclient.bat' }

    }
}

def srcSpec = copySpec {
    from("$projectDir") {
        include "*.txt"
        include "*.md"
        include "settings.gradle"
        include "build.gradle"
        include "gradle.properties"
        include "Makefile"
    }
    into("src") {
        from "$projectDir/src"
    }
    into("contrib") {
        from "$projectDir/contrib"
    }
    from("$projectDir") {
        fileMode = 0755
        include "gradlew*"
    }
    into("gradle") {
        from "$projectDir/gradle"
    }
    into("buildSrc") {
        from "$projectDir/buildSrc"
        include "src/**"
        include "build.gradle"
    }
    into("docs") {
        from "$projectDir/docs"
    }
}

//----------------------------------
// Build

compileGroovy {
    // Compiling just for checking at a compile time
    source = [file("$projectDir/src/main/java"), file("$projectDir/src/main/groovy")]
    destinationDir = file("$buildDir/classes/compile-static")
    groovyOptions.configurationScript = file("$projectDir/gradle/configScript.groovy")

    doLast {
        // Groovy sources shouldn't be compiled in order to avoid a trouble
        // of unmatch of Java version between compile-time and runtime.
        // Groovy classes compiled from src/main/groovy are used only by unit tests.
        // Instead, Groovy sources including JAR file under build/executables directory are used by integration tests.
        copy {
            into "$buildDir/classes/java/main"
            from "$projectDir/src/main/groovy"
            filter(ReplaceTokens, tokens: [GROOVYSERV_VERSION: project.version])
        }
    }
}

compileTestGroovy {
    doFirst {
        compileTestGroovy.classpath += project.files(compileGroovy.destinationDir)
    }
}

task compileGo {
    inputs.dir file("$projectDir/src/main/go")
    outputs.dir file("$buildDir/platforms/local")
    doLast {
        logger.lifecycle ">> Compiling Go sources..."
        fileTree("$projectDir/src/main/go/").include("*.go").each { srcFile ->
            // for local environment by default for testing
            def outputFileName = srcFile.name - '.go'
            def env = [:]
            if (isWindows()) {
                outputFileName += ".exe"
            }
            compileGoSrc(srcFile, outputFileName, "local", env)
        }
    }
}

task crossCompileGo {
    inputs.dir file("$projectDir/src/main/go")
    outputs.dir file("$buildDir/platforms/")
    doLast {
        logger.lifecycle ">> Cross compiling Go sources..."
        fileTree("$projectDir/src/main/go/").include("*.go").each { srcFile ->
            [
                [GOOS: "darwin", GOARCH: "amd64"],
                [GOOS: "darwin", GOARCH: "arm64"],
                [GOOS: "linux", GOARCH: "386"],
                [GOOS: "linux", GOARCH: "amd64"],
                [GOOS: "linux", GOARCH: "arm64"],
                [GOOS: "windows", GOARCH: "386", ext: ".exe"],
                [GOOS: "windows", GOARCH: "amd64", ext: ".exe"],
                [GOOS: "windows", GOARCH: "arm64", ext: ".exe"],
            ].each { platform ->
                def outputFileName = srcFile.name - '.go' + (platform.ext ?: '')
                compileGoSrc(srcFile, outputFileName, "${platform.GOOS}_${platform.GOARCH}", platform.subMap('GOOS', 'GOARCH'))
            }
        }
    }
}

task executables(type: Copy, dependsOn: ['assemble', 'compileGo', 'crossCompileGo']) {
    destinationDir = file("$buildDir/executables")
    inputs.dir file("$projectDir/src/main")
    outputs.dir destinationDir
    with localBinSpec

    ext.executablesDir = destinationDir
}

task expandDistBin(type: Copy, dependsOn: ['assemble', 'crossCompileGo'], description: "Expand a distBin archive to work directory") {
    destinationDir = file("$buildDir/executables-dist")
    inputs.dir file("$projectDir/src/main")
    outputs.dir destinationDir
    with binSpec
}

//----------------------------------
// Distribution

task dist(dependsOn: ['distBin', 'distSrc'], description: "Make all distribution archives.", group: "Distribution")

task distBin(type: Zip, dependsOn: ['assemble', 'crossCompileGo'], description: "Make a distribution archive of binaries.", group: "Distribution") {
    inputs.dir file("$projectDir/src/main")
    archiveBaseName = project.name
    archiveClassifier = 'bin'
    into "${project.name}-$version"
    with binSpec
}

task distSrc(type: Zip, description: "Make a distribution archive of source code.", group: "Distribution") {
    inputs.dir file("$projectDir/src/main")
    archiveBaseName = project.name
    archiveClassifier = 'src'
    into "${project.name}-$version"
    with srcSpec
}

task distLocalBin(type: Zip, dependsOn: ['assemble', 'compileGo'], description: "Make a distribution archive of binaries only for a direct use by self-built.", group: "Distribution") {
    inputs.dir file("$projectDir/src/main")
    archiveBaseName = project.name
    archiveClassifier = 'bin-local'
    into "${project.name}-$version"
    with localBinSpec
}

build.dependsOn 'dist'

//----------------------------------
// Test

test {
    useJUnitPlatform()
    // This causes running this task even though UP-TO-DATE skipping condition is met.
    systemProperty 'spock.configuration', "spock/unit.groovy"
}

task integrationTest(type: Test, dependsOn: 'executables', description: "Run all integration tests.", group: "Verification") {
    mustRunAfter "test"
    maxParallelForks = 1 // Avoiding run in parallel
    //reports.html.enabled = false

    // This causes running this task even though UP-TO-DATE skipping condition is met.
    systemProperty 'spock.configuration', "spock/integration.groovy"

    // prop for TestUtils
    def binDir = normalizePath(file("${executables.executablesDir}/bin"))
    systemProperty 'groovyserv.executable.client', "$binDir/groovyclient"
    systemProperty 'groovyserv.executable.server', "$binDir/groovyserver"

    useJUnitPlatform()

    doFirst {
        restartGroovyServer()
    }
    doLast {
        shutdownGroovyServer()
    }

    testLogging {
        events "passed", "failed", "started", "skipped"
    }

    finalizedBy "mergeTestReports"
}
check.dependsOn integrationTest

task mergeTestReports(type: TestReport, group: "Verification") {
    destinationDir = file("$buildDir/reports/tests")

    // These must point to the binary test results directory generated by a Test task instance.
    // If Test task instances are specified directly, this task would depend on them and run them.
    reportOn files("$buildDir/test-results/binary/test", "$buildDir/test-results/binary/integrationTest")
}

tasks.withType(Test).each {
    it.testLogging {
        // show standard out and standard error of the test JVM(s) on the console
        showStandardStreams = true

        // show the message on failure
        exceptionFormat "full"
        events "failed"
    }
    it.classpath += project.files(compileGroovy.destinationDir)
    it.jvmArgs += [
        '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
        '--add-opens', 'java.base/java.util=ALL-UNNAMED',
        '--add-opens', 'java.base/java.lang.reflect=ALL-UNNAMED'
    ]
}


//------------------------
// Documentation

task docs(description: "Build documentation by Gaiden.", group: "Documentation") {
    ext.srcDir = file("$projectDir/docs")
    ext.outputDir = file("$buildDir/docs")
    ext.env = [
        GROOVYSERV_VERSION: project.version,
        GROOVY_VERSION: groovyVersion
    ]
    inputs.dir srcDir
    inputs.file file("$projectDir/gradle.properties")
    outputs.dir outputDir
    doLast {
        executeCommand(['gaiden', 'build'], env, srcDir)
    }
}

task watchDocs(description: "Build documentation continually by Gaiden.", group: "Documentation"){
    doLast {
        executeCommand(['gaiden', 'watch'], docs.env, docs.srcDir)
    }
}

task publishToGhpages(dependsOn: "docs", description: "Copy documentation to gh-pages branch.", group: "Documentation") {
    doLast {
        executeCommand(['git', 'checkout', 'gh-pages'])
        delete "*.html", "sources", "static", "css", "extensions", "fonts", "images", "js"
        copy {
            into "$projectDir"
            from docs.outputDir
        }
    }
}

//------------------------
// Deployment

sdkman {
    api = "https://vendors.sdkman.io/"

    // You must set these variables in $HOME/.gradle/gradle.properties
    consumerKey = sdkmanConsumerKey
    consumerToken = sdkmanConsumerToken

    candidate = "groovyserv"
    version = project.version
    url = "https://bitbucket.org/kobo/groovyserv-mirror/downloads/groovyserv-${project.version}-bin.zip"
    hashtag = "#groovyserv"
}

//===========================================
// Helpers
//===========================================

def restartGroovyServer() {
    logger.lifecycle ">> Restarting groovyserver..."
    operateServer(["-r"])
}

def shutdownGroovyServer() {
    logger.lifecycle ">> Shutting down groovyserver..."
    operateServer(["-k"])
}

def operateServer(List options) {
    def binDir = normalizePath(file("${executables.executablesDir}/bin"))
    def groovyserverPath = "$binDir/groovyserver"
    executeCommand([groovyserverPath, *options])
}

def executeCommand(List command, Map additionalEnv = [:], File workDir = null) {
    logger.lifecycle ">> Executing command..."
    logger.lifecycle "\$ ${command.join(' ')}"
    exec {
        commandLine command
        environment additionalEnv
        if (workDir) workingDir workDir
    }
}

def normalizePath(File file) {
    file.canonicalPath.replaceAll('\\\\', '/')
}

def isWindows() {
    ant.condition(property: "os", value: "windows") { os(family: "windows") }
    return ant.properties['os'] == "windows"
}

def compileGoSrc(File srcFile, String outputFileName, String platform, Map<String, String> env = [:]) {
    executeCommand(["go", "build", "--ldflags", "-w -s \"-X=main.GroovyServVersion=${project.version}\"", "-o", "$buildDir/platforms/$platform/$outputFileName", srcFile.path], env, srcFile.parentFile)
}

